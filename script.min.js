let skills=[{name:"figma",weight:.1,has:!1},{name:"wireframing",weight:.06,has:!1},{name:"prototyping",weight:.08,has:!1},{name:"usability_testing",weight:.08,has:!1},{name:"heuristic_evaluation",weight:.05,has:!1},{name:"user_interviews",weight:.07,has:!1},{name:"accessibility",weight:.06,has:!1},{name:"html_css",weight:.05,has:!1},{name:"javascript",weight:.04,has:!1},{name:"python",weight:.04,has:!1},{name:"sql",weight:.03,has:!1},{name:"ab_testing",weight:.04,has:!1},{name:"data_visualization",weight:.03,has:!1}],totalWeight=skills.reduce(((e,t)=>e+t.weight),0),totalSkills=skills.length,skillsContainer=document.getElementById("skills"),computeButton=document.getElementById("compute"),rawPctEl=document.getElementById("rawPct"),weightedPctEl=document.getElementById("wPct"),missingListEl=document.getElementById("missingList"),explainEl=document.getElementById("explain"),chartCanvas=document.getElementById("chart"),chart=new Chart(chartCanvas,{type:"doughnut",data:{labels:["Covered","Uncovered"],datasets:[{data:[0,totalWeight],backgroundColor:["#22c55e","#334155"],borderColor:["#16a34a","#1f2937"],borderWidth:1}]},options:{cutout:"60%",animation:!1,plugins:{legend:{labels:{color:"#e5e7eb"}}}}});function renderSkills(){let e="";skills.forEach(((t,a)=>{const i=`skill_${a}`;e+=`<label for="${i}"><input id="${i}" name="skills" type="checkbox" data-idx="${a}"/> ${t.name.replaceAll("_"," ")}</label>`})),skillsContainer.innerHTML=e}skillsContainer.addEventListener("change",(e=>{const t=e.target;if(t&&t.matches('input[type="checkbox"]')){const e=Number(t.dataset.idx);Number.isNaN(e)||(skills[e].has=t.checked)}}));function compute(){let e=0,t=0;for(const a of skills)a.has&&(e++,t+=a.weight);const a=e/totalSkills,i=t/totalWeight;rawPctEl.innerText=(100*a).toFixed(1)+"%",weightedPctEl.innerText=(100*i).toFixed(1)+"%";const s=totalWeight-t;chart.data.datasets[0].data=[t,s],chart.update("none");const n=skills.filter((e=>!e.has)).sort(((e,t)=>t.weight-e.weight))[0];missingListEl.innerText=n?"Top missing skill: "+n.name.replaceAll("_"," "):"All skills covered",explainEl.innerText=`Raw coverage counts how many skills are selected (${e} of ${totalSkills}). Weighted coverage sums the importance of selected skills (${t.toFixed(2)} of ${totalWeight.toFixed(2)} total weight).`}computeButton.onclick=compute,renderSkills();
